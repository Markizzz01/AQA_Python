# Задача 1 (Арифметические операции)
# Напиши код, который вычисляет сумму чисел 8 и 3, а затем выводит результат.
from importlib.util import source_hash

result = 8 + 3
print(result) #Вывод 11
# Без переменной
print (8 + 3) #Вывод 11

# Задача 2 (Преобразование типов данных)
# Преобразуй число 25 в строку и выведи его тип с помощью type()
value = 25
value_str = str(value)
print (type(value_str)) #Вывод <class 'str'>

# Задача 3 (Операции сравнения)
# Напиши код, который сравнивает числа 10 и 7 с помощью оператора >= и выводит результат сравнения.
print (10 >= 7) # Вывод True
print (10 <= 7) # Вывод False

# Задача 4 (Именование переменных)
# Объяви переменную, которая хранит количество студентов в группе, соблюдая правила именования в Python. Затем выведи её значение.
total_student = 25
print(total_student) # Вывод 25

# Задача 5 (Переопределение переменной)
# Объяви переменную price = 100, затем переопредели её значение на 90 и выведи оба значения последовательно.
price = 100
print(price) # Вывод 100

price = 90
print(price) # Вывод 90

# Задача 6 (Объявление переменных)
# Объяви переменную fruit и присвой ей значение "яблоко". Затем выведи эту переменную.

fruit = "яблоко"
print(fruit) # Вывод яблоко

# Задача 7 (Арифметические операции)
# Вычисли разницу между числами 15 и 6 и выведи результат.

print(15 - 6) # Вывод 9

# Задача 8 (Типы данных)
# Определи тип данных значения 7.5 и выведи его через type().
value = 7.5
print (type(value)) # Вывод <class 'float'>

# Задача 9 (Операции сравнения)
# Сравни числа 20 и 20 с помощью оператора == и выведи результат.
print (20 == 20) # Вывод True
print (20 != 20) # Вывод False
print (20 >= 20) # Вывод True

# Задача 10 (Переопределение переменной)
# Объяви переменную count = 5
# Переопредели её значение на 10
# Выведи оба значения в одном print() через запятую
count = 5
print(count, end=", ")
count = 10
print(count) # Вывод 5, 10

# Задача 11 (Арифметические операции)
# Вычисли квадрат числа 8 и выведи результат.
value = 8
square = value ** 2
print(square) # Вывод 64

# Задача 12 (Типы данных)
# Определи тип данных значения "3.14" (строка) и выведи его через type().
value =  3.14
print(type(value)) # Вывод <class 'float'>

# Задача 13 (Операции сравнения)
# Сравни строки "Python" и "python" с помощью == и выведи результат.
print("Python" == "python") # Вывод False
print("python" == "python") # Вывод True
print("python" != "Python") # Вывод True

# Задача 14 (Преобразование типов)
# Преобразуй строку "123" в целое число и выведи его тип через type().
value = "123"
value_int = int(value)
print(type(value_int)) # Вывод <class 'int'>

# Задача 15 (Арифметические операции)
# Вычисли остаток от деления 27 на 4 и выведи результат.
print (27 % 4) # Вывод 3

# Задача 16 (Переопределение переменной)
# Создай переменную temperature = 15
# Переопредели её значение на temperature + 5
# Выведи новое значение
temperatura = 15
temperatura = temperatura + 5
print (temperatura) # Вывод 20

# Задача 17 (Сравнение строк)
# Проверь, содержится ли подстрока "fox" в строке "The quick brown fox jumps".
text = "The quick brown fox jumps"
print("fox" in text) # Вывод True
print("foc" in text) # Вывод False

# Задача 18 (Преобразование типов)
# Преобразуй список ["1", "2", "3"] в список чисел [1, 2, 3] и выведи его.
my_list = ["1", "2", "3"]
new_list = list(map(int, ["1", "2", "3"]))
print(new_list) # Вывод [1, 2, 3]

# Задача 19 (Логические операции)
# Даны две переменные:
a = True
b = False
# Выведи результат операций:
# a and b
# a or b
# not a

print(a and b) # Вывод False
print(a or b)  # Вывод True
print(not a)   # Вывод False

# Задача 20(Работа со списками) fruits = ["apple", "banana", "cherry"]
# Добавь в конец списка элемент "orange".
# Выведи обновлённый список.

fruits = ["apple", "banana", "cherry"]
fruits.append("orange")
print(fruits) # Вывод ['apple', 'banana', 'cherry', 'orange']

# Задача 21 (Условные выражения)
# Напиши код, который проверяет, является ли число 10 чётным, и выводит True или False.
print(10 % 2 == 0) # Вывод True
print(11 % 2 == 0) # Вывод False


# Задача 22 (Доступ к символам)
# Дана строка:
word = "Кодинг"
# Выведи на экран третий символ этой строки.
third_char = word[2]
print(third_char) # Вывод д

# Задача 23 (Срезы)
# Дана строка
text = "Автоматизация"
# Выведи на экран срез с 3-го по 7-й символ включительно
substring = text[3:8]
print(substring)

# Задача 24 (Длина строки)
# Дана строка:
message = "Hello, Python!"
# Напиши код, который выводит длину этой строки.
length = len(message)
print(length) # Вывод 14

# Задача 25 (конкатенация):
part1 = "Авто"
part2 = "матизация"
# Объедини их и выведи результат
result = part1 + part2
print(result) # Автоматизация

# Задача 26 (F-строки)
# Даны переменные:
name = "Анна"
age = 25
# Создай строку info с помощью f-строки, чтобы она содержала:
# "Меня зовут Анна, мне 25 лет."
# Выведи info на экран.
info = f"Меня зовут {name}, мне {age} лет."
print(info) # Вывод "Меня зовут Анна, мне 25 лет."

# Задача 27 (Работа со списками)
# Дан список:
fruits = ["apple", "banana", "cherry"]
# Добавь в конец списка элемент "orange" и выведи обновлённый список.
fruits.append("orange")
print(fruits) # Вывод ['apple', 'banana', 'cherry', 'orange']

# Задача 28 (Условные выражения)
# Проверь, является ли число 15 чётным, и выведи True или False.
print(15 % 2 == 0) # Вывод False
print(15 % 2 == 1) # Вывод True

# Задача 29 (Списки и срезы), дан список:
numbers = [10, 20, 30, 40, 50]
# Выведи элементы с 1-го по 3-й (включительно) используя срезы.
new_numbers = numbers[1:4]
print(new_numbers) #  Вывод [20, 30, 40]

# Задача 30 (Изменение списка), дан список:
colors = ["red", "green", "blue"]
# Замени второй элемент ("green") на "yellow" и выведи обновлённый список.
colors[1] ="yellow"
print (colors) # Вывод ['red', 'yellow', 'blue']

# Задача 31
# Создай строку с именем city и присвой ей значение "Москва". Выведи на экран второй символ этой строки.
city = "Москва"
new_city = city[1]
print(new_city) # Вывод о

# Задача 32
# Создай два списка - fruits с элементами "яблоко", "груша" и vegetables с элементами "морковь", "огурец"
# Объедини их в один список под названием products и выведи его.
fruits = ["яблоко","груша"]
vegatables = ["морковь", "огурец"]
product = fruits + vegatables
print(product) # Вывод ['яблоко', 'груша', 'морковь', 'огурец']

# Задача 33
# Создай строку text со значением "Python — это просто!".
# Выведи срез этой строки от 0 до 6 (не включая 6).
text = "Python — это просто!"
new_text = text[:6]
print(new_text) # Вывод Python

# Задача 34
# Создай список numbers с элементами 1, 2, 3.
# Добавь в него элемент 4 с помощью метода списка и выведи обновленный список
numbers = [1, 2, 3]
numbers.append(4)
print(numbers) # Вывод [1, 2, 3, 4]

# Задача 35
# Создай переменную name со значением "Алексей".
# С помощью f-строки выведи фразу: Привет, Алексей!
name = "Алексей"
info = f"Привет, {name}!"
print(info) # Вывод Привет, Алексей!

# Задача 36
# Создай строку word со значением "Программирование" и выведи длину этой строки.
word = "Программирование"
length = len(word)
print(length) # Вывод 16

# Задача 37
# Создай список colors с элементами "красный", "зелёный", "синий".
# Замени второй элемент списка на "жёлтый" и выведи обновлённый список.
colors = ["красный", "зеленый", "синий"]
colors[1] = "желтый"
print(colors) # Вывод ['красный', 'желтый', 'синий']

# Задача 38
# Создай переменную age со значением 18.
# Используя условный оператор if, выведи строку "Совершеннолетний", если возраст больше или равен 18.
age = 18
if age >= 18:
    print("Совершеннолетний") # Вывод Совершеннолетний

# Задача 39
# Создай строку greeting со значением "доброе утро". Преобразуй её в верхний регистр методом строки и выведи результат.
greeting = "доброе утро"
result = greeting.upper()
print(result) # Вывод ДОБРОЕ УТРО

# Задача 40
# Создай список nums с элементами 10, 20, 30, 40. Удалите из него элемент 30 с помощью метода списка и выведи результат.
nums = [10, 20, 30, 40]
nums.remove(30)
print(nums) # Вывод [10, 20, 40]

# Задача 41
# Создай переменную score со значением 75.
# Используй условный оператор if-elif-else и выведи:
# 	•	"Отлично", если score больше или равен 90
# 	•	"Хорошо", если score больше или равен 60, но меньше 90
# 	•	"Попробуй ещё", если меньше 60
score = 75
if score >= 90:
    print("Отлично")
elif score >= 60:
    print("Хорошо")
else:
    print("Попробуй ещё") # Вывод Хорошо

# Задача 42
# Создай переменную temperature со значением -5.
# С помощью if-elif-else выведи:
# 	•	"Тепло", если температура выше 20
# 	•	"Прохладно", если от 0 до 20 включительно
# 	•	"Холодно", если меньше 0
temperatura = -5
if temperatura > 20:
    print("Тепло")
elif temperatura >= 0 and temperatura <= 20:
    print("Прохладно")
else:
    print("Холодно") # Вывод Холодно

# Задача 43
# Создай переменную speed со значением 120.
# С помощью if-elif-else выведи:
# 	•	"Медленно", если скорость меньше 40
# 	•	"Нормально", если от 40 до 100 включительно
# 	•	"Быстро", если больше 100
speed = 120
if speed < 40:
    print("Медленно")
elif speed <= 100:
    print("Нормально")
else:
    print("Быстро") # Вывод Быстро

# Задача 44
# Создай переменную balance со значением 0.
# С помощью if-elif-else выведи:
# 	•	"Положительный баланс", если больше 0
# 	•	"Ноль", если равен 0
# 	•	"Отрицательный баланс", если меньше 0
balanse = 0
if balanse >0:
    print("Положительный баланс")
elif balanse == 0:
    print("Ноль")
else:
    print("Отрицательный баланс") # Вывод Ноль

# Задача 45
# Создай переменную x со значением 5.
# С помощью тернарного оператора присвой переменной result строку "Чётное", если x делится на 2 без остатка, иначе "Нечётное".
# Выведи result.
x = 5
result = "Четное" if x % 2 == 0 else "Нечетное"
print(result) # Нечетное

# Задача 46
# Создай переменную number со значением 0.
# С помощью тернарного оператора присвой переменной msg:
# 	•	"Положительное", если число больше 0
# 	•	"Отрицательное", если меньше 0
# 	•	"Ноль", если равно 0
number = 0
msg = "Положительное" if number > 0 else "Отрицательное" if  number < 0 else "Ноль"
print(msg) # Вывод Ноль

# Задача 47
# Создай переменную grade со значением 4.
# С помощью тернарного оператора присвой переменной mark:
# 	•	"Отлично", если grade равно 5
# 	•	"Хорошо", если grade равно 4
# 	•	"Удовлетворительно" во всех остальных случаях
grade = 4
mark = "Отлично" if grade == 5 else "Хорошо" if grade == 4 else "Удовлетворительно"
print(mark) # Вывод Хорошо

# Задача 48
# Создай переменную login_attempts со значением 0.
# С помощью тернарного оператора присвой переменной status:
# 	•	"Заблокирован", если попыток больше 3
# 	•	"Предупреждение", если попыток от 1 до 3 включительно
# 	•	"Окей", если попыток 0
login_attempts = 0
status = "Заблокирован" if login_attempts > 3 else "Окей" if login_attempts == 0 else "Предупреждение"
print(status) # Вывод Окей

# Задача 49
#Создай переменную temperature со значением 15.
# С помощью if-elif-else выведи:
#	•	"Жарко", если температура выше 25
#	•	"Тепло", если температура от 15 до 25 включительно
#	•	"Холодно", если ниже 15
temperatura = 15
if temperatura > 25:
    print("Жарко")
elif temperatura >= 15 and temperatura <= 25:
    print("Тепло")
else:
    print("Холодно") # Вывод тепло

# Задача 50
# Создай переменную age и задай ей любое число.
# С помощью условного оператора if выведи сообщение "Совершеннолетний", если значение переменной age больше или равно 18.
age = 25
if age >= 18:
    print("Совершеннолетний") # Вывод Совершеннолетний

# Задача 51
# Создай переменную number и задай ей любое число.
# С помощью условного оператора if-else выведи "Чётное", если число делится на 2 без остатка, и "Нечётное" — если нет.
number = 496
if number % 2 == 0:
    print("Четное")
else:
    print("Нечетное") # Вывод Четное

# Задача 52
# Создай переменную temp и присвой ей любое число.
# Если temp меньше 0, выведи "Холодно"
# Если temp от 0 до 20 включительно, выведи "Прохладно"
# Иначе выведи "Тепло"
temp = 30
if temp < 0:
    print("Холодно")
elif temp >= 0 and temp <= 20:
    print("Прохладно")
else:
    print("Тепло")

# Задача 53
# Создай две переменные: a и b, присвой им любые числа.
# С помощью операции сравнения > выведи True, если a больше b, иначе False.
a = 5
b = 8
print(a > b) # Вывод False

# Задача 54
# Создай переменную score и присвой ей число от 0 до 100.
# С помощью тернарного оператора выведи "Отлично", если score больше или равно 90, иначе "Могло быть и лучше".
score = 80
result = "Отлично" if score >= 90 else "Могло быть и лучше"
print(result) # Вывод Могло быть и лучше

# Задача 55
# Создай переменную is_raining и задай ей значение True или False.
# С помощью логического оператора not выведи "Можно идти гулять", только если не идёт дождь.
is_raining = True
if not is_raining:
    print("Можно идти гулять")
else:
    print("только если не идет дождь") # Вывод только если не идет дождь

# Задача 56
# Создай словарь person с ключами "name" и "age" и значениями "Алексей" и 25.
# Выведи этот словарь на экран.
person = {
    "name" : "Алексей",
    "age" : 25
}
print(person) # Вывод {'name': 'Алексей', 'age': 25}

# Задача 57
# Создай пустой словарь book.
# Затем добавь в него ключ "title" со значением "Python 101".
# Выведи обновлённый словарь.
book = {}
book["title"] = "Python 101"
print(book) # Вывод {'title': 'Python 101'}

# Задача 58
# Создай словарь user с ключами "login" и "password".
# Значения — "admin" и "1234".
# Выведи значение по ключу "login".
user = {
    "login" : "admin",
    "password" : "1234"
}
login = user["login"]
print(login) # Вывод admin

# Задача 59
# Удали из словаря user ключ "password".
# Выведи обновлённый словарь.
del user["password"]
print(user) # Вывод {'login': 'admin'}

# Задача 60
# Создай словарь product с ключами "name" и "price", значениями "яблоко" и 50.
# Обнови значение ключа "price" на 60.
# Выведи словарь.
product = {
    "name" : "яблоко",
    "price" : 50
}
product["price"] = 60
print(product) # Вывод {'name': 'яблоко', 'price': 60}

# Задача 61
# Создай словарь car с ключами "brand", "model", "year".
# Значения: "Toyota", "Corolla", 2020.
# Выведи все ключи словаря.
car = {
    "brand" : "Toyota",
    "model" : "Corolla",
    "year"  :  2020
}
print(car.keys()) # Вывод dict_keys(['brand', 'model', 'year'])

# Задача 62
# Создай словарь student с ключами "name", "grade", "age".
# Значения: "Иван", 5, 17.
# Выведи все значения словаря student.
student= {
    "name" : "Иван",
    "grade" : 5,
    "age" : 17
}
print(student.values()) # Вывод dict_values(['Иван', 5, 17])

# Задача 63
# Создай словарь city с ключами "name", "population".
# Значения: "Москва", 12_500_000.
# Проверь, есть ли в словаре ключ "country".
# Выведи результат проверки (True или False).
city = {
    "name" : "Москва",
    "population" : 12_500_000
}
print("country" in city) # Вывод False

# Задача 64
# Создай словарь employee с ключами "name", "position", "salary".
# Значения: "Анна", "менеджер", 50000.
# Проверь, есть ли в словаре значение "менеджер".
# Выведи результат проверки (True или False).
employee = {
    "name" : "Анна",
    "position" : "менеджер",
    "salary" : 50000
}
print("менеджер" in employee.values()) # Вывод True

# Задача 65
# Создай словарь phone с ключами "brand", "model", "price".
# Значения: "Samsung", "Galaxy S21", 70000.
# Проверь, есть ли в словаре ключ "model".
# Проверь, есть ли в словаре значение 60000.
# Выведи результаты проверок (True или False) в две строки.
phone = {
    "brand" : "Samsung",
    "model" : "Galaxy S21",
    "price" : 7000
}
print("model" in phone.keys()) # Вывод True
print(60000 in phone.values()) # Вывод False

# Задача 66
# Создай словарь inventory с ключами "apples", "oranges", "bananas".
# Значения: 10, 20, 15.
# Удали ключ "oranges" из словаря.
# Выведи обновлённый словарь.
inventory ={
    "apples" : 10,
    "oranges" : 20,
    "bananas" : 15
}
del inventory["oranges"]
print(inventory) # Вывод {'apples': 10, 'bananas': 15}

# Задача 67
# Создай словарь animal с ключами "type", "name", "age".
# Значения: "кошка", "Муся", 3.
# Получи все пары ключ-значение (items) и выведи их.
animal = {
    "type" : "кошка",
    "name" :  "Муся",
    "age" : 3
}
print(animal.items()) # Вывод dict_items([('type', 'кошка'), ('name', 'Муся'), ('age', 3)])

# Задача 68
# Создай словарь movie с ключами "title", "year", "genre".
# Значения: "Inception", 2010, "sci-fi".
# Обнови жанр на "fantasy".
# Выведи обновлённый словарь.
movie = {
    "title" : "Inception",
    "year" : 2010,
    "genre" : "sci-fi"
}
movie["genre"] = "fantasy"
print(movie) # Вывод {'title': 'Inception', 'year': 2010, 'genre': 'fantasy'}

# Задача 69
# Создай словарь user с ключами "name" и "email", значениями "Олег" и "oleg@example.com".
# Проверь, есть ли значение "Олег" в этом словаре.
# Выведи результат проверки.
user = {
    "name" : "Олег",
    "email" : "oleg@example.com"
}
print("Олег" in user.values()) # Вывод True

# Задача 70
# Создай словарь profile с ключами "username", "email", "active".
# Значения: "markizzz", "markizzz@example.com", True.
# Если ключ "active" есть в словаре — удали его.
# Выведи обновлённый словарь.
profile = {
    "username" : "markizzz",
    "email" : "markizzz@example.com",
    "active" : True
}
if "active" in profile:
    del profile["active"]
    print(profile) # Вывод {'username': 'markizzz', 'email': 'markizzz@example.com'}

# Задача 71
# Создай список fruits с элементами "яблоко", "банан", "киви", "апельсин".
# С помощью цикла for выведи каждый элемент списка на новой строке.
fruits = ["яблоко", "банан", "киви", "апельсин"]
for fruit in fruits:
    print(fruit) # Вывод :
# яблоко
# банан
# киви
# апельсин

# Задача 72
# Создай строку message со значением "Привет, мир!".
# С помощью цикла for пройдись по каждому символу строки и выведи его на новой строке.
message = "Привет, мир"
for letter in message:
    print(letter) # Вывод каждый символ выведен на новой строке

# Задача 73
# Создай список чисел numbers с элементами 3, 7, 2, 9.
# С помощью цикла for выведи каждый элемент списка, умноженный на 2.
numbers = [3, 7, 3, 9]
for number in numbers:
    print(number * 2) # Вывод 6, 14, 6, 18

# Задача 74
# Создай строку text со значением "Python".
# С помощью цикла for выведи каждый символ строки, добавив к нему в выводе восклицательный знак.
# Например: P! y! t! ...
text = "Python"
for text_2 in text:
    print(text_2 + "!") # Вывод P! y! и т

# Задача 75
# Создай список чисел от 1 до 5 с помощью функции range.
# С помощью цикла for выведи каждый элемент списка.
for numbers in range(1, 6):
    print(numbers) # Вывод 1 2 3 4 5

# Задача 76
# Создай строку word со значением "hello".
# С помощью цикла while выведи каждый символ строки на новой строке.
word = "hello"
i = 0
while i < len(word):
    print(word[i])
    i += 1

# Задача 77
# Создай список colors с элементами "красный", "зелёный", "синий".
# С помощью цикла for выведи каждый цвет, но прекрати вывод при встрече цвета "зелёный" (используй break).
colors = ["красный", "зелёный", "синий"]
for color in colors:
    if color == ("зелёный"):
        break
    print(color) # Вывод красный

# Задача 78
# Создай число count со значением 0.
# Используй цикл while, чтобы увеличить count на 1 и вывести его значение, пока count меньше 5.
count = 0
while count < 5:
    print(count)
    count += 1 # Вывод 0 1 2 3 4

# Задача 79
# Создай список numbers с элементами 10, 20, 30, 40, 50.
# С помощью цикла for выведи только те числа, которые больше 25.
numbers = [10, 20, 30, 40, 50]
for number in numbers:
    if number > 25:
     print(number) # Вывод 30 40 50

# Задача 80
# Создай список имен names с элементами "Анна", "Иван", "Мария", "Пётр".
# С помощью цикла for выведи имена, пропуская имя "Мария" (используй continue).
names = ["Анна", "Иван", "Мария", "Пётр"]
for name in names:
    if name == "Мария":
        continue
    print(name) # Вывод Анна Иван Пётр

# Задача 81
# Создай число n со значением 10.
# Используй цикл while, чтобы выводить числа от n до 1 в обратном порядке (включительно)
n = 10
while n >= 1:
    print(n)
    n -= 1 # Вывод 10 9 8 и т.д
# Задача 82
# Создай строку word со значением "code".
# С помощью цикла for выведи каждый символ строки дважды (например: cс, oо, dд, eе).
word = "code"
for wordd in word:
    print(wordd * 2) # Вывод cc oo и т.д

# Задача 83
# Создай список food с элементами "хлеб", "сыр", "молоко", "вода".
# С помощью цикла for выведи элементы списка, но останови цикл при встрече элемента "молоко" (используй break).
food = ["хлеб", "сыр", "молоко", "вода"]
for foodd in food:
    if foodd == ("молоко"):
       break
    print(foodd) # Вывод хлеб сыр

# Задача 84
# Создай список numbers с элементами 1, 2, 3, 4, 5.
# С помощью цикла for выведи квадраты только чётных чисел из списка.
numbers = [ 1, 2, 3, 4, 5]
for number in numbers:
    if number % 2 == 0:
      print(number ** 2) # Вывод 4 16

# Задача 85
# Создай число x со значением 0.
# Используй цикл while, чтобы увеличить x на 3 и вывести его, пока x меньше 15.

x = 0
while x < 15:
    print(x)
    x += 3   # Вывод 0 3 6 9 12

# Задача 86
# Создай число x со значением 0.
# Используй цикл while, чтобы увеличить x на 3 и вывести его, пока x меньше 15.

x = 0
while x < 15:
    print(x)
    x += 3 # Вывод 0 3 6 9 12

# Задача 87
# Создай список fruits с элементами "яблоко", "банан", "киви", "апельсин".
# Используй цикл for, чтобы вывести каждый фрукт на новой строке.
fruits = ["яблоко", "банан", "киви", "апельсин"]
for fruit in fruits:
    print(fruit) # Вывод яблоко банана киви апельсин

# Задача 88
# Создай строку message со значением "Привет".
# Используй цикл for, чтобы вывести каждый символ строки на новой строке.
message = "Привет"
for message_2 in message:
    print(message_2) # Вывод каждый символ на новой строке

# Задача 89
# Создай список numbers с элементами 1, 2, 3, 4, 5.
# Используй цикл for, чтобы вывести удвоенные значения каждого числа.
numbers = [1, 2, 3, 4, 5]
for number in numbers:
    print(number * 2) # Вывод 2 4 6 8 10

# Задача 90
# Используй функцию range, чтобы с помощью цикла for вывести числа от 1 до 5 включительно.
for number in range(1, 6):
    print(number) # Вывод 1 2 3 4 5

# Задача 91
# Создай число count со значением 0.
# Используй цикл while, чтобы увеличить count на 2 и вывести его, пока count меньше 10.
count = 0
while count < 10:
    print(count)
    count += 2 # Выввод 0 2 4 6 8

# Задача 92
# Создай список colors с элементами "красный", "зелёный", "синий".
# Используй цикл for и оператор break, чтобы вывести элементы списка до "зелёный" включительно, затем остановить цикл.
colors = ["красный", "зелёный", "синий"]
for color in colors:
    print(color)
    if color == "зелёный":
       break
                  # Вывод красный зелёный
# Задача 93
# Создай число number со значением 0.
# Используй цикл while, чтобы увеличить number на 2 и вывести его, пока number меньше 10.
number = 0
while number < 10:
    print(number)
    number += 2  #Вывод 0 2 4 6 8

# Задача 94
# Создай строку word со значением "python".
# Используй цикл for, чтобы пройтись по каждому символу строки.
# Выводи каждый символ дважды на новой строке.
word = "python"
for word_2 in word:
    print(word_2 * 2) #Вывод pp yy и т.д


# Задача 95
# Создай файл с именем "example.txt" и запиши в него строку "Это пример записи в файл".
# Используй для этого контекстный менеджер with.
with open("example.txt", "w") as file:
    file.write("Это пример записи в файл")

# Задача 96
# Создай текстовый файл с именем "data.txt", если его ещё нет.
# Открой файл в режиме добавления.
# Добавь в него строку "Новая строка данных\n" с помощью метода write().
with open("data.txt", "a") as file:
    file.write("Новая строка данных\n")

# Задача 97
# Открой файл "example.txt" для чтения.
# Считай содержимое файла и выведи его на экран.
# Используй контекстный менеджер with.
with open("example.txt", "r", encoding = "utf-8") as file:
    content = file.read()
    print(content)

# Задача 98
# Открой файл "data.txt" для чтения.
# Считай все строки файла и выведи каждую строку отдельно.
# Используй цикл for для вывода строк.
with open("data.txt", "r", encoding = "utf-8") as file:
    for line in file:
        print(line.strip()) # без переноса строки

# Задача 99
# Создай новый файл "log.txt".
# Запиши в него три строки:
# "Первая запись"
# "Вторая запись"
# "Третья запись"
# Используй контекстный менеджер with и режим записи.
with open("log.txt", "w") as file:
    file.write("Первая запись\n")
    file.write("Вторая запись\n")
    file.write("Третья запись\n")

# Задача 100
# Создай файл info.txt и запиши в него строку "Информация о системе" в режиме записи.
# Затем открой файл в режиме чтения и выведи содержимое.
with open("info.txt", "w") as file:
    file.write("Информация о системе")
with open("info.txt", "r", encoding= "utf-8") as file:
    print(file.read()) # Вывод Информация о системе

# Задача 101
# Создай файл "notes.txt" и запиши в него строку "Первая заметка".
# Затем открой этот же файл в режиме 'a' и добавь строку "Вторая заметка".
# После этого прочитай файл и выведи его содержимое построчно.

with open("notes.txt", "w") as file:
    file.write("Первая строка\n")
with open("notes.txt", "a") as file:
    file.write("Вторая строка\n")
with open("notes.txt", "r", encoding= "utf-8") as file:
    for line in file:
        print(line.strip()) # Вывод Первая строка Вторая строка

# Задача 103
# Открой файл "report.txt" в режиме добавления ("a").
# Добавь в файл строку "Данные за понедельник".
# Используй контекстный менеджер with.
with open("report.txt", "a") as file:
    file.write("Данные за понедельник\n")
with open("report.txt", "r", encoding= "utf-8") as file:
    print(file.read())

# Задача 104
# Создай файл "log.txt" и запиши в него три строки:
# "Ошибка: файл не найден", "Ошибка: доступ запрещён", "Ошибка: неизвестная".
# Используй режим "w" и контекстный менеджер with.
with open("log.txt", "w") as file:
    file.write("Ошибка: файл не найден\nОшибка: доступ запрещён\nОшибка: неизвестная\n")
with open("log.txt", "r", encoding= "utf-8") as file:
        print(file.read()) # Вывод Ошибка: файл не найден Ошибка: доступ запрещён Ошибка: неизвестная

import os
os.remove("notes.txt")

# Задача 105
# Создай переменную number и присвой ей целое число 7.
# Создай переменную text и присвой ей строку "Привет".
# Выведи на экран тип переменной number и тип переменной text.
number = 7
print(type(number))
text = "Привет"
print(type(text))

# Задача 106
# Создай функцию с именем greet
# Функция должна печатать фразу "Привет, мир!"
# Вызови эту функцию
def greet():
    print("Привет, мир!")

greet() # Вывод Привет, мир!

# Задача 107
# Создай функцию say_hello, которая при вызове выводит строку "Привет!".
# Вызови функцию say_hello один раз.
def say_hello():
    print("Привет!")

say_hello() # Вывод Привет!

# Задача 108
# Создай функцию greet, которая принимает один аргумент — имя (строку).
# Функция должна выводить приветствие в формате: "Привет, <имя>!".
# Вызови функцию greet с аргументом "Алексей".
def greet(name):
    print(f"Привет, {name}!")

greet("Алексей") # Вывод Привет, Алексей!

# Задача 109
# Создай функцию multiply, которая принимает два числа и возвращает их произведение.
# Вызови функцию multiply с аргументами 4 и 5 и выведи результат.
def multiply(a, b):
    return a * b

result = multiply(4,5)
print(result) # Вывод 20

# Задача 110
# Создай функцию greet_person, которая принимает два аргумента: имя и возраст.
# Если возраст не передан, он должен быть равен 18 по умолчанию.
# Функция должна выводить сообщение: "Привет, <имя>! Тебе <возраст> лет."
# Вызови функцию greet_person с аргументом "Оля" (без указания возраста).
def greet_person(name, age=18):
    print(f"Привет, {name}! Тебе {age} лет.")

greet_person("Эдик") # Вывод Привет, Эдик! Тебе 18 лет.

# Задача 111
# Создай функцию square, которая принимает одно число и возвращает его квадрат.
# Вызови эту функцию с числом 6 и выведи результат на экран.
def square(age):
    return  age ** 2
result = square(6)
print(result) # Вывод 36

# Задача 112
# Создай декоратор log_message, который перед выполнением функции выводит сообщение "Выполняется функция..."
# Применить этот декоратор к функции hello, которая просто выводит "Привет!".
# Вызови функцию hello.
def log_message(func):
  def wrapper():
      print(f"Выполняется функция..")
      func()
  return wrapper

@log_message
def hello():
    print("Привет!")

hello() # Вывод Выполняется функция.. Привет!

# Задача 113
# Создай функцию concatenate, которая принимает два строковых аргумента и возвращает их конкатенацию (сложение).
# Вызови функцию с аргументами "Привет, " и "мир!" и выведи результат.
def concatenate(a, b):
    return a + b

result = concatenate("Привет,", "мир!")
print(result) # Вывод Привет, мир!

# Задача 114
# Напиши функцию is_positive, которая принимает число и возвращает True, если число больше нуля, иначе False.
# Вызови функцию с числом -5 и выведи результат.
def is_positive(age):
     if age > 0:
         return True
     else:
         return False

print(is_positive(-5))

# Задача 115
# Напиши функцию is_negative, которая принимает число и возвращает True, если число меньше нуля, иначе False.
# Вызови функцию с числом 12 и выведи результат.
def is_negative(num):
    if num < 0:
        return  True
    else:
        return  False

print(is_negative(12)) # Вывод False

# Задача 116
# Напиши функцию greet_user, которая принимает два аргумента: имя и язык (строкой).
# Если язык не указан, по умолчанию используется "ru".
# Если язык "ru" — вывести "Привет, <имя>!"
# Если язык "en" — вывести "Hello, <имя>!"
# Вызови функцию с аргументом "Лена" (без указания языка).
def greet_user(name, languages="ru"):
    if languages == "ru":
        print(f"Привет, {name}!")
    else:
        print(f"Hello, {name}!")

greet_user("Лена" ,  "ru") # Вывод Привет, Лена!

def greet_user(name, languages="en"):
    if languages == "ru":
        print(f"Привет, {name}!")
    else:
        print(f"Hello, {name}!")

greet_user("Лена" ,  "en") # Вывод Hello, Лена!

# Задача 117
# Напиши функцию get_square, которая принимает один аргумент — число.
# Функция должна возвращать квадрат этого числа.
# Вызови функцию с аргументом 7 и выведи результат на экран.
def get_square(num):
    return num **2

result = get_square(7)
print(result) # Вывод 49

# Задача 118
# Напиши функцию get_power, которая принимает два аргумента: число и степень (по умолчанию 2).
# Функция должна возвращать результат возведения числа в степень.
# Вызови функцию один раз с двумя аргументами (5, 3), и второй раз — только с числом (4).
# Выведи оба результата.
def get_power(num, power=2):
    return num ** power
result1 = get_power(5, 3)
result2 = get_power(4)

print(result1) # Вывод 125
print(result2) # Вывод 16

# Задача 119
# Создай функцию is_divisible, которая принимает два числа: num и divisor.
# Функция должна возвращать True, если num делится на divisor без остатка, иначе False.
# Вызови функцию с числами 10 и 5, выведи результат.
def is_divisible(num, division):
    if num % division == 0:
        return True
    else:
        return False

print(is_divisible(10, 5)) # Вывод True

# Задача 120
# Напиши декоратор uppercase_decorator, который преобразует результат работы функции (строку) в верхний регистр.
# Применить этот декоратор к функции say_hello, которая возвращает строку "привет".
# Вызови функцию say_hello и выведи результат.
def uppercase_decorator(func):
    def wrapper():
        result = func()
        return result.upper()
    return wrapper

@uppercase_decorator
def say_hello():
    return "привет"
print(say_hello()) # Вывод ПРИВЕТ


# Задача 121
# Напиши функцию greet_person, которая принимает имя и возраст.
# Функция должна возвращать строку: "Привет, <имя>! Тебе <возраст> лет."
# Вызови функцию с именем "Саша" и возрастом 25, выведи результат.
def greet_person (name, age):
    return f"Привет, {name}! Тебе {age} лет."

print(greet_person("Иван", 35)) # Привет, Иван! Тебе 35 лет.

# Задача 122
# Создай функцию с именем say_hello
# Внутри функции выведи на экран строку "Привет, друг!"
# Вызови эту функцию один раз
def say_hello():
    print("Привет, друг!")

say_hello() # Вывод Привет, друг!

# Задача 123
# Напиши функцию add_numbers, которая принимает два аргумента: x и y.
# Функция должна возвращать сумму этих чисел.
# Вызови функцию с аргументами 3 и 5, сохрани результат в переменную result
# и выведи result через print.
def add_numbers(x, y):
    return x + y
result = add_numbers(3, 5)
print(result) # Вывод 8

# Задача 124
# Напиши функцию get_square(), которая принимает один аргумент — число.
# Функция должна возвращать квадрат этого числа.
# Вызови функцию с числом 6 и выведи результат.

def get_square(num):
    return num ** 2

print(get_square(6)) # Вывод 36

# Задача 125
# Напиши функцию с именем greet_user
# Она должна принимать два аргумента: name и city
# Функция должна печатать строку вида: "Привет, <name> из <city>!"
# Вызови эту функцию с любыми значениями
def greet_user(name, city):
    print(f"Привет, {name} из {city}")

greet_user("Eddy", "Zhirlandiya") # Вывод Привет, Eddy из Zhirlandiya

# Задача 126
# Напиши функцию с именем say_age, которая принимает один аргумент — возраст.
# Функция должна возвращать строку вида: "Тебе X лет", где X — переданный возраст.
# Затем вызови функцию с аргументом 22 и выведи результат.
def say_age(age):
    return f"Тебе {age} лет"

print(say_age(22)) # Вывод Тебе 22 лет

# Задача 127
# Напиши функцию make_greeting, которая принимает два аргумента: name и age.
# Функция должна возвращать строку в формате: "Привет, <name>! Тебе <age> лет."
# Вызови функцию с именем "Аня" и возрастом 19 и выведи результат на экран.
def make_greeting(name, age):
    return f"Привет {name}! Тебе {age} лет"

print(make_greeting("Аня", 19)) # Вывод Привет Аня! Тебе 19 лет

# Задача 128
# Напиши функцию describe_pet с двумя аргументами: animal и name.
# Функция должна возвращать строку вида:
# "У меня есть <animal>, его зовут <name>."
# Вызови функцию с параметрами "попугай" и "Кеша" и выведи результат.
def describe_pet (animal, name):
    return f"У меня есть {animal}, его зовут {name}."

print(describe_pet("попугай", "Кеша")) # Вывод У меня есть попугай, его зовут Кеша.

# Задача 129
# Напиши функцию multiply с двумя аргументами: a и b.
# Функция должна возвращать произведение этих двух чисел.
# Вызови функцию с параметрами 4 и 7 и выведи результат.
def multiply(a, b):
    return a * b
print(multiply(4, 7)) # Вывод 28

# Задача 130
# Напиши функцию greet_person, которая принимает два аргумента: name и age.
# Аргумент age должен иметь значение по умолчанию 18.
# Функция должна возвращать строку вида: "Привет, <name>! Тебе <age> лет."
# Вызови функцию дважды: один раз с двумя аргументами, другой — только с name.
# Выведи оба результата.
def greet_person(name, age=18):
    return f"Привет, {name}! Тебе {age} лет."

print(greet_person("Ivan", 29)) #Вывод Привет, Ivan! Тебе 29 лет.
print(greet_person("Ivan")) #Вывод ривет, Ivan! Тебе 18 лет.

# Задача 131
# Напиши функцию is_even, которая принимает один аргумент — число.
# Функция должна возвращать True, если число чётное, и False — если нечётное.
# Вызови функцию с числом 10 и с числом 7, выведи результаты через print.
def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False
result = is_even(10)
result1 = is_even(7)
print(result) # Вывод True
print(result1) # Вывод False

# Задача 132
# Напиши функцию get_full_name, которая принимает два аргумента: first_name и last_name.
# Функция должна возвращать строку в формате: "<first_name> <last_name>".
# Вызови функцию с именем "Анна" и фамилией "Иванова", выведи результат.
def get_full_name(first_name, last_name):
    return f"{first_name} {last_name}"

print(get_full_name("Анна", "Иванова")) # Вывод Анна Иванова

# Задача 133
# Напиши функцию calculate_area, которая принимает два аргумента: width и height.
# Функция должна возвращать площадь прямоугольника (width * height).
# Вызови функцию с шириной 5 и высотой 8, выведи результат через print.
def calculate_area(width, height):
    return width * height
print(calculate_area(5, 8 )) # Вывод 40

# Задача 134
# Напиши функцию с именем print_message, которая принимает один аргумент — сообщение.
# Функция должна выводить это сообщение на экран.
# Вызови функцию дважды с любыми строками.
def print_message(сообщение):
    print(сообщение)

print_message("пришло") #Вывод пришло
print_message("пришло не тебе") # Вывод пришло не тебе

# Задача 135
# Напиши простой декоратор logger, который выводит текст "Выполняется функция..." перед вызовом функции.
# Создай функцию say_hi, которая просто печатает "Привет!".
# Примени декоратор к say_hi и вызови её один раз.
def logger(func):
    def wrapper():
        print("Выполняется функция")
        func()
    return wrapper

@logger
def say_hi():
    print("Привет!")

say_hi() #Вывод Выполняется функция Привет!

# Задача 136
# Напиши декоратор decorator_with_args, который принимает функцию с любым количеством позиционных и именованных аргументов.
# Перед вызовом функции выводит строку: "Начинаем выполнение функции".
# После вызова функции выводит строку: "Функция выполнена".
# Создай функцию multiply, которая принимает два аргумента и возвращает их произведение.
# Примени декоратор к multiply и вызови с аргументами 4 и 5, выведи результат.
def decorator_with_args(func):
    def wrapper(*args, **kwargs):
        print("Начинаем выполнение функции")
        result = func(*args, **kwargs)
        print("Функция выполнена")
        return result
    return wrapper

@decorator_with_args
def multiply(a,b):
    return a * b
print(multiply(4,5)) #Вывод Начинаем выполнение функции Функция выполнена 20

# Задача 137
# Напиши функцию is_adult, которая принимает один аргумент — возраст.
# Функция должна возвращать True, если возраст 18 или больше, иначе False.
# Вызови функцию с возрастом 20 и 16, выведи результаты через print.
def is_adult(age):
    return age >= 18

print(is_adult(20)) #Вывод True
print(is_adult(16)) #Вывод False


# Задача 138
# Напиши функцию greet, которая принимает два аргумента: name и greeting с дефолтным значением "Привет".
# Функция должна возвращать строку вида: "<greeting>, <name>!"
# Вызови функцию с аргументами ("Маша", "Здравствуйте") и с одним аргументом ("Петя").
# Выведи оба результата.
def greet(name, greeting="Привет"):
    return f"{greeting}, {name}!"
print(greet("Маша", "Здравствуйте")) #Вывод Здравствуйте, Маша!
print(greet("Петя")) #Вывод Привет, Петя!

# Задача 139
# Напиши функцию get_max, которая принимает три числа и возвращает максимальное из них.
# Вызови функцию с числами 5, 9 и 2, выведи результат через print.
def get_max(a, b, c):
    return max(a, b ,c)
print(get_max(5, 7 ,79)) #Вывод 79

# Задача 140
# Напиши функцию get_min, которая принимает три числа и возвращает наименьшее из них.
# Вызови функцию с числами 12, 4 и 19, выведи результат через print.
def get_min(a, b, c):
    return min(a, b ,c )
print(get_min(2, 4, 44)) #Вывод 2

# Задача 141
# Создай класс Dog.
# Внутри класса определи метод bark, который выводит "Гав!".
# Создай объект класса Dog и вызови у него метод bark.
class Dog:
    def __init__(self):
        pass

    def bark(self):
        print("Гав!")

my_dog = Dog()
my_dog.bark() #Вывод Гав!

# Задача 142
# Создай класс Cat.
# В конструкторе __init__ задай атрибут name.
# Добавь метод meow, который выводит "Мяу! Меня зовут <name>".
# Создай объект класса Cat с именем "Мурка".
# Вызови метод meow у созданного объекта.
class Cat:
    def __init__(self,name):
        self.name = name

    def meow(self):
        print(f"Мяу! Меня зовут {self.name}")

cat1 = Cat("Мурка")
cat1.meow() #Вывод Мяу! Меня зовут Мурка

# Задача 143
# Создай класс Person с методом __init__, принимающим два параметра: name и age.
# Сохрани их как атрибуты экземпляра.
# Добавь метод introduce, который выводит строку вида:
# "Меня зовут <name>, мне <age> лет."
# Создай объект класса с именем "Оля" и возрастом 28, вызови метод introduce.
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def introduce(self):
        print(f"Меня зовут {self.name}, мне {self.age} лет.")

person1 = Person("Оля", 28)
person1.introduce() #Вывод Меня зовут Оля, мне 28 лет.

# Задача 144
# Создай класс Rectangle.
# В конструкторе __init__ задай атрибуты width и height.
# Добавь метод area, который возвращает площадь прямоугольника (width * height).
# Создай объект класса Rectangle с шириной 5 и высотой 10.
# Выведи площадь этого прямоугольника, вызвав метод area.
class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
       return self.width * self.height

rect = Rectangle(5, 10)
print(rect.area()) #Вывод 50

# Задача 145
# Создай класс BankAccount.
# В конструкторе __init__ задай атрибуты owner (владелец) и balance (баланс, по умолчанию 0).
# Добавь метод deposit(amount), который увеличивает баланс на amount.
# Добавь метод withdraw(amount), который уменьшает баланс на amount, если хватает денег.
#   Если денег недостаточно, выводит "Недостаточно средств".
# Добавь метод display_balance(), который выводит текущий баланс в формате:
# "Баланс владельца <owner>: <balance>"
# Создай объект с владельцем "Иван" и балансом 100.
# Попробуй положить 50, снять 30, вывести баланс, попытаться снять 150 и снова вывести баланс.
class BankAccount:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance

    def deposit(self,amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount

        else:
            print("Недостаточно средств")

    def display_balance(self):
        print(f"Баланс владельца {self.owner}: {self.balance}")

account = BankAccount("Иван", 100)   # Баланс 100
account.deposit(50)                 # +50 → Баланс становится 150
account.withdraw(30)               # -30 → Баланс становится 120
account.display_balance()          # Вывод: Баланс владельца Иван: 120
account.withdraw(150)              # Попытка снять 150 — не хватает, баланс 120 → сообщение
account.display_balance()          # Вывод: Баланс владельца Иван: 120

# Задача 146
# Создай класс Book.
# В конструкторе __init__ задай два атрибута: title (название книги) и author (автор).
# Добавь метод info, который выводит строку:
# "Книга '<title>' написана автором <author>."
# Создай объект класса Book с любыми значениями и вызови метод info.
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

    def info(self):
        print(f"Книга {self.title} написана автором {self.author}")

book_1 = Book("Пророк", "Пушкин")
book_1.info() # Вывод Книга Пророк написана автором Пушкин

# Задача 147
# Создай класс Circle.
# В конструкторе __init__ прими один параметр: radius (радиус круга) и сохрани его.
# Добавь метод area, который возвращает площадь круга (формула: 3.14 * radius ** 2).
# Создай объект класса Circle с радиусом 5 и выведи результат работы метода area.
class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

my_circle = Circle(5)
print(my_circle.area()) # Вывод 78.5

# Задача 148
# Создай класс Animal с атрибутами species (вид) и name (имя).
# Добавь метод speak(), который выводит строку:
# "<name> — это <species>, и он издаёт звук!"
# Создай объект класса Animal и вызови метод speak().
class Animal:
    def __init__(self, species, name):
        self.species = species
        self.name = name

    def speak(self):
        print(f"{self.species} - это {self.name}, и он издаёт звук!")


animal = Animal("Жизнь", "драйв")
animal.speak() #Вывод Жизнь - это драйв, и он издаёт звук!

# Задача 149
# Создай класс Book с атрибутами title (название) и author (автор).
# Добавь метод show_info, который выводит строку вида:
# "<title>" написана автором <author>.
# Создай объект книги и вызови метод show_info.
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

    def show_info(self):
        print(f"{self.title} написана автором {self.author}.")
book = Book("Война и мир","Толстой")
book.show_info() # Вывод Война и мир написана автором Толстой.

# Задача 150
# Создай базовый класс Animal с методом speak, который выводит "Животное издаёт звук".
# Затем создай подкласс Dog, который наследует Animal.
# В классе Dog переопредели метод speak так, чтобы он выводил "Собака лает".
# Создай объект класса Dog и вызови у него метод speak
class Animal:
        def speak(self):
            print(f"Животное издаёт звук")

class Dog(Animal):
       def speak(self):
           print(f"Собака лает")

dog = Dog()
dog.speak() #Вывод Собака лает

# Задача 151
# Создай родительский класс Vehicle с методом move, который выводит "Транспорт едет".
# Затем создай дочерний класс Car, который наследуется от Vehicle.
# Переопредели метод move в классе Car, чтобы он выводил "Машина едет быстро".
# Создай объект класса Car и вызови у него метод move.
class Vehicle:
    def move(self):
        print(f"Транспорт едет")

class Car(Vehicle):
    def move(self):
        print(f"Машина едет быстро")

car = Car()
car.move() #Вывод Машина едет быстро

# Задача 152
# Создай класс Car с атрибутами make и model.
# Добавь метод display_info, который выводит строку
# "<марка> <модель>".
# Создай объект и вызови метод.
class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model

    def display_info(self):
        print(f"{self.make} {self.model}")


car = Car("VW", "Passat")
car.display_info() # Вывод VW Passat

# Задача 153
# Создай родительский класс Animal с методом sound(), который выводит "Животное издаёт звук".
# Создай дочерний класс Cat, который переопределяет метод sound(), чтобы он выводил "Кошка мяукает".
# Создай объект класса Cat и вызови метод sound().
class Animal:
    def sound(self):
        print("Животное издает звук")


class Cat(Animal):
    def sound(self):
        print("Кошка мяукает")


cat = Cat()
cat.sound() #Вывод Кошка мяукает
# Задача 154
# Создай родительский класс Vehicle с методом move(), который выводит "Транспорт движется".
# Создай дочерний класс Bicycle, который наследует Vehicle и переопределяет метод move(), чтобы он выводил "Велосипед едет".
# Создай объект класса Bicycle и вызови метод move().
class Vehicle:
    def move(self):
        print("Транспорт движется")

class Bicycle(Vehicle):
    def move(self):
        print("Велосипед eдет")

vehicle = Bicycle()
vehicle.move() #Вывод Велосипед eдет

# Задача 155
# Создай родительский класс Person с атрибутом name и методом greet(), который выводит "Привет, меня зовут {name}".
# Создай дочерний класс Student, который наследует Person и добавляет атрибут course.
# Переопредели метод greet() в классе Student, чтобы он выводил "Привет, меня зовут {name}, я учусь на курсе {course}".
# Создай объект класса Student и вызови метод greet().
# Родительский класс
class Person:
    def __init__(self, name):
        self.name = name

    def greet(self):
        print(f"Привет, меня зовут {self.name}")


class Student(Person):
    def __init__(self, name, course):
        super().__init__(name)
        self.course = course

    def greet(self):
        print(f"Привет, меня зовут {self.name}, я учусь на курсе {self.course}")


student = Student("Алексей", "Python")
student.greet()

# Задача 156
# Создай родительский класс Vehicle с атрибутом brand и методом drive(), который выводит "Транспорт {brand} едет".
# Создай дочерний класс Car, который наследует Vehicle и добавляет атрибут model.
# Переопредели метод drive() в классе Car, чтобы он выводил "Машина {brand} {model} едет быстро".
# Создай объект класса Car и вызови метод drive().
class Vehicle:
    def __init__(self, brand):
        self.brand = brand


    def drive(self):
        print(f"Транспорт {self.brand} едет")


class Car(Vehicle):
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model


    def drive(self):
        print(f"Машина {self.brand} {self.model} едет быстро")


car = Car("Skoda","Superb")
car.drive() # Вывод Машина Skoda Superb едет быстро

# Задача 157
# Создай родительский класс Animal с атрибутом name и методом speak(), который выводит "Животное {name} издаёт звук".
# Создай дочерний класс Dog, который наследует Animal и добавляет атрибут breed.
# Переопредели метод speak() в классе Dog, чтобы он выводил "Собака породы {breed} по кличке {name} лает".
# Создай объект класса Dog и вызови метод speak().
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        print(f"Животное {self.name} издаёт звук.")


class Dog(Animal):
    def __init__(self, name, breed):
        self.name = name
        self.breed = breed

    def speak(self):
        print(f"Собака породы {self.breed} по кличке {self.name} лает")


dog = Dog("Милка", "французский бульдог")
dog.speak() # Вывод Собака породы французский бульдог по кличке Милка лает

# Задача 158
# Создай родительский класс Appliance с атрибутом brand и методом turn_on(), который выводит "Прибор {brand} включен".
# Создай дочерний класс WashingMachine, который наследует Appliance и добавляет атрибут load_capacity.
# Переопредели метод turn_on() в классе WashingMachine, чтобы он выводил "Стиральная машина {brand} с загрузкой {load_capacity} кг включена".
# Создай объект класса WashingMachine и вызови метод turn_on().
class Appliance:
    def __init__(self, brand):
        self.brand = brand


    def turn_on(self):
        print(f"Прибор {self.brand} включен")


class WashingMachine(Appliance):
    def __init__(self, brand, load_capacity):
        self.brand = brand
        self.load_capacity = load_capacity


    def turn_on(self):
        print(f"Стиральная машина {self.brand} с загрузкой {self.load_capacity} кг включена")


wash = WashingMachine("LG",3)
wash.turn_on()

# Задача 159
# Создай родительский класс Device с атрибутом brand и методом power_on(), который выводит "Устройство {brand} включено".
# Создай дочерний класс Smartphone, который наследует Device и добавляет атрибут model.
# Переопредели метод power_on() в классе Smartphone, чтобы он выводил "Смартфон {brand} {model} включен и готов к работе".
# Создай объект класса Smartphone и вызови метод power_on().
class Device:
    def __init__(self, brand):
        self.brand = brand

    def power_on(self):
        print(f"Устройство {self.brand} включено")


class Smartphone(Device):
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def power_on(self):
        print(f"Смартфон {self.brand} {self.model} включен и готов к работе")


phone = Smartphone("iPhone", 16)
phone.power_on() # Вывод Смартфон Iphone 16 включен и готов к работе

# ПОВТОРЕНИЕ МАТЕРИАЛА

# Задача 1
# Создай переменную age со значением 25.
# Создай переменную name со значением "Алексей".
# Выведи в консоль строку "Меня зовут {name}, мне {age} лет" с использованием f-строки.
age = 25
name = "Алексей"
print(f"Меня зовут {name}, мне {age} лет")

# Задача 2
# Создай строку text со значением "Привет, мир!".
# Выведи первую букву строки.
# Выведи последние три буквы строки.
# Преобразуй строку в верхний регистр и выведи результат.
text = "Привет мир!"
first_char = text[0]
print(first_char)
thre_char = text[-3:]
print(thre_char)
result = text.upper()
print(result)

# Задача 3
# Создай список fruits со значениями "яблоко", "банан", "вишня".
# Добавь в список элемент "апельсин".
# Удали первый элемент списка.
# Выведи длину списка и все его элементы.
fruits = ["яблоко", "банан", "вишня"]
fruits.append("апельсин")
print(fruits)
fruits.remove("яблоко")
print(fruits)
count = len(fruits)
print(count)

# Задача 4
# Создай переменную temperature со значением 15.
# Если температура больше 20, выведи "Тёпло".
# Если температура от 10 до 20 включительно, выведи "Прохладно".
# Иначе выведи "Холодно".
temperature = 15
if temperatura >= 20:
    print("Тёпло")
elif temperature >= 10 and temperature <= 20:
    print("Прохладно")
else:
    print("Холодно")

# Задача 5
# Используя цикл for, выведи числа от 1 до 5 включительно.
# Используя цикл while, увеличивай переменную x начиная с 0 на 2, пока x меньше 10, и выводи значение x на каждом шаге.
for i in range(1,6):
    print(i)

x = 0
while x < 10:
    print(x)
    x += 2

# Задача 6
# Создай переменную n со значением 7.
# Используя цикл for, выведи все числа от 0 до n включительно, которые делятся на 2.
# Используя цикл while, начинай с x = n и уменьшай x на 1, пока x не станет 0, выводя значение x на каждом шаге.
for i in range(0, n + 1):
    if i % 2 == 0:
        print(i)

x = n
while x > 0:
    print(x)
    x -= 1

# Задача 7
# Создай файл "test.txt" и запиши в него строку "Привет, файл!".
# Закрой файл.
# Затем открой файл на чтение и выведи его содержимое.
with open("text.txt", "w") as file:
    file.write("Привет, файл!")

with open("text.txt", "r", encoding= "utf-8") as file:
    content = file.read()
    print(content)

# Задача 8
# Создай функцию greet, которая принимает имя и выводит строку "Привет, {имя}!".
# Вызови эту функцию два раза с разными именами.
def greet(name):
    print(f"Привет, {name}!")
greet("Алиса")
greet("Инфедория")

# Задача 9
# Создай функцию square, которая принимает число и возвращает его квадрат.
# Сохрани результат вызова функции в переменную и выведи её значение.
def square(number):
    return number ** 2

result = square(9)
print(result)

# Задача 10
# Создай функцию greet_user, которая принимает имя пользователя и возраст.
# Функция должна вывести строку вида:
# "Привет, <имя>! Тебе <возраст> лет."
# Вызови функцию хотя бы два раза с разными аргументами.
def greet_user(name, age):
    print(f"Привет, {name}! Тебе {age} лет.")

greet_user("Мерф", 54)
greet_user("Аля", 23)

# Задача 11
# Создай функцию add_numbers, которая принимает два числа и возвращает их сумму.
# Сохрани результат вызова функции в переменную и выведи её значение.
# Попробуй вызвать функцию с разными числами несколько раз.
def add_numbers(a,b):
    return a + b

result = add_numbers(205.15, 10)
print(result)
result = add_numbers(115, 87)
print(result)

# Задача 12
# Создай класс Car с атрибутом color.
# Добавь метод show_color(), который выводит цвет машины.
# Создай объект класса Car с цветом "красный" и вызови метод show_color().
class Car:
    def __init__(self,color):
        self.color = color

    def show_color(self):
        print(self.color)


my_car = Car("Белый")
my_car.show_color()

# Задача 13
# Создай класс Book с атрибутом title.
# Добавь метод show_title(), который выводит название книги.
# Создай объект класса Book с названием "Война и мир" и вызови метод show_title().
class Book:
    def __init__(self, title):
        self.title = title

    def show_title(self):
        print(self.title)

my_book = Book("Война и мир")
my_book.show_title()

# Задача 14
# Создай родительский класс Animal с методом sound(), который выводит "Животное издаёт звук".
# Создай дочерний класс Dog, который наследует Animal.
# Не переопределяй метод sound(), а просто создай объект класса Dog и вызови метод sound().
class Animal:
    def sound(self):
        print("Животное издает звук")

class Dog(Animal):
    pass

dog = Dog()
dog.sound()

# Задача 15
# Создай родительский класс Animal с методом move(), который выводит "Животное двигается".
# Создай дочерний класс Bird, который переопределяет метод move(), чтобы он выводил "Птица летает".
# Создай объект класса Bird и вызови метод move().
class Animal:
    def move(self):
        print("Животное двигается")

class Bird(Animal):
    def move(self):
        print("Птица летает")


bird = Bird()
bird.move()

# Задача 16
# Создай класс Animal с методом __init__, который принимает name и sound, и сохраняет их как атрибуты.
# Добавь метод make_sound(), который выводит "<имя> издает звук: <звук>".
# Создай дочерний класс Cat, который наследует Animal и при создании всегда имеет sound = "мяу".
# Создай объект кошки с именем "Мурка" и вызови метод make_sound().
class Animal:
    def __init__(self, name, sound):
        self.name = name
        self.sound = sound

    def make_sound(self):
        print(f"{self.name} издает звук: {self.sound}")


class Cat(Animal):
    def __init__(self, name):
        super().__init__(name, "мяу")
        self.sound = "мяу"


an = Cat("Мурка")
an.make_sound()
# Задача 16
# Создай класс Dog, который наследуется от Animal.
# В конструкторе принимай только name.
# При создании объекта всегда передавай в Animal звук "гав".
# Создай собаку с именем "Шарик" и вызови метод make_sound().
class Dog(Animal):
    def __init__(self, name):
        super().__init__(name, "гав")

dog = Dog("Шарик")
dog.make_sound()

# Задача 17
# Создай родительский класс Animal с методом make_sound(),
# который выводит "<имя> издает звук".
# Создай дочерний класс Cow, который переопределяет метод make_sound(),
# чтобы он всегда выводил "<имя> мычит".
# Создай объект класса Cow и вызови метод make_sound().
class Animal:
    def __init__(self, name):
        self.name = name


    def make_sound(self):
        print(f"{self.name} издает звук")
        


class Cow(Animal):
    def make_sound(self):
        print(f"{self.name} мычит")

cow = Cow("Корова")
cow.make_sound()

# Задача 18
# Создай родительский класс Vehicle с атрибутом name.
# В классе Vehicle сделай метод move(), который выводит "<name> двигается".
# Создай три дочерних класса:
# - Car (метод move() выводит "<name> едет по дороге")
# - Boat (метод move() выводит "<name> плывёт по воде")
# - Plane (метод move() выводит "<name> летит в небе")
# Создай по одному объекту каждого класса и вызови метод move() для всех.
class Vehicle:
    def __init__(self, name):
        self.name = name


    def move(self):
        print(f"{self.name} двигается")

class Car(Vehicle):
    def move(self):
        print(f"{self.name} едет по дороге")

class Boat(Vehicle):
    def move(self):
        print(f"{self.name} плывет по воде")


class Plane(Vehicle):
    def move(self):
        print(f"{self.name} летит в небе")


car = Car("Машина")
boat = Boat("Катер")
plane = Plane("Истребитель")

car.move()
boat.move()
plane.move()
# Задача 19
# Создай родительский класс Appliance (Бытовой прибор) с атрибутом name.
# Добавь метод turn_on(), который выводит "<прибор> включён".
# Создай три дочерних класса:
#  - WashingMachine (Стиральная машина), переопредели метод turn_on(), чтобы выводить "<прибор> начинает стирку".
#  - Refrigerator (Холодильник), переопредели метод turn_on(), чтобы выводить "<прибор> охлаждает продукты".
#  - Microwave (Микроволновка), переопредели метод turn_on(), чтобы выводить "<прибор> разогревает еду".
# Создай по одному объекту каждого класса и вызови у них метод turn_on().
class Appliance:
    def __init__(self, name):
        self.name = name


    def turn_on(self):
        print(f"{self.name} включен")



class WashingMachine(Appliance):
    def turn_on(self):
        print(f"{self.name} начинает стирку")



class Refrigerator(Appliance):
    def turn_on(self):
        print(f"{self.name} охлаждает продукты")



class Microwave(Appliance):
    def turn_on(self):
        print(f"{self.name} разогревает еду")

wash = WashingMachine("Стиральная машина")
ref = Refrigerator("Холодильник")
mic = Microwave("Микроволновка")

wash.turn_on()
ref.turn_on()
mic.turn_on()

#1. Создайте переменную `number` со значением 42.
#2. Преобразуйте её в строку и сохраните в переменную #`number_str`.
#3. Создайте переменную `text` со значением "The answer is: ".
#4. Объедините строку `text` и строку `number_str` и сохраните #результат в переменную `result`.
#5. Выведите на экран:
#- значение и тип данных `number`,
#- значение и тип данных `number_str`,
#- значение и тип данных `text`,
#- значение и тип данных `result`.
number = 42
number_str = str(number)
text = "The answer is: "
result = text + number_str
print(type(number))
print(type(number_str))
print(type(text))
print(type(result))

#Задача 2. Строки
#Даны две переменные:
#name = "внесите ваше имя сюда"
#age = введите ваш возраст.
#Используя f-строку, выведите на экран сообщение: "Меня зовут #ваше имя, мне ваш возраст лет."
name = "Алексей"
age = 25
print(f"Меня зовут {name}, мне {age}")

#Задача 3. Списки
#Дан список my_list = [1, 2, 3].
#Создайте копию этого списка, измените первый элемент копии на #10 и выведите оба списка
my_list = [1, 2, 3]
copy_my_list = my_list.copy()
copy_my_list[0] = 10
print(my_list)
print(copy_my_list)

#Задача 4. Условные операторы
#Напишите программу, которая принимает число от пользователя и #проверяет:
# Если число больше 0, выведите "Положительное".
# Если число равно 0, выведите "Ноль".
# Если число меньше 0, выведите "Отрицательное".
number = 8
if number > 0:
    print("Положительное")
elif number == 0:
    print("Ноль")
else:
    print("Отрицательное")


# Задача 5. Словари
# Дан словарь:
person = {

    "name": {

        "first_name": "Иван",
        "last_name": "Иванов"

    },

    "address": {

        "city": "Москва",
        "country": "Россия"

    }

}
# Обновите значение ключа "city" на "Ставрополь" и добавьте #новый ключ "postal_code" со значением "333777" в словарь #"address".
# Выведите значение через print.
# Затем удалите ключ "city" из вложенного словаря "address" и #снова выведите значение через print.
person = {

    "name": {

        "first_name": "Иван",
        "last_name": "Иванов"

    },

    "address": {

        "city": "Москва",
        "country": "Россия"

    }

}
person["address"]["city"] = "Cтаврополь"
person["address"]["postal_code"] = "333777"
print(person["address"])

del person["address"]["city"]
print(person["address"])

#Задача 6. Циклы
#Напишите цикл while, который выводит числа от 1 до 20, но
#пропускает числа, которые делятся на 4 (используйте continue)
x = 1
while x <= 20:
    if x % 4 == 0:
        x += 1
        continue
    print(x)
    x += 1
#Задача 7. Файлы
#Создайте файл с именем "fruits.txt" и запишите в него названия #фруктов:
#"яблоко", "банан", "апельсин" (каждое с новой строки).
#Затем откройте этот файл, прочитайте все строки и выведите на #экран только те строки, которые начинаются с буквы "а".
# Запись фруктов в файл
with open("fruits.txt", "w", encoding="utf-8") as file:
    file.write("яблоко\n")
    file.write("банан\n")
    file.write("апельсин\n")

with open("fruits.txt", "r", encoding="utf-8") as file:
    lines = file.readlines()
    for line in lines:
        if line.startswith("а"):
            print(line.strip())


# Задача 8. Функции
# Напишите функцию greet_user, которая приветствует пользователя #в зависимости от его роли и имени. Функция должна принимать #два параметра:
# user_role (обязательный) — строка, указывающая роль #пользователя (например, "Администратор", "Гость", "Модератор").
# user_name (необязательный) — строка с именем пользователя. По #умолчанию должно быть None.
# Логика работы функции:
# Если имя пользователя передано
# (user_name не None и не пустая строка),
# то функция должна вывести:
# "Привет, {user_name}! Ваша роль: {user_role}."
# Если имя не передано (user_name равно None или пустая #строка), функция должна вывести: "Привет, Гость! Ваша роль: #{user_role}."
def greet_user(user_role, user_name=None):
    if user_name:  # проверяем, что имя есть и не пустое
        print(f"Привет, {user_name}! Ваша роль: {user_role}.")
    else:
        print(f"Привет, Гость! Ваша роль: {user_role}.")

greet_user("Администратор", "Алексей")
greet_user("Гость")
greet_user("Модератор", "")


#Задача 9. ООП ч.1
#Создайте класс `Student`.
#У класса должны быть атрибуты `name`  и `age`, которые #задаются при создании объекта через конструктор `__init__`.
#Создай объект класса `Student` с вашим именем и вашим возрастом.
#Выведи на экран имя и возраст студента.
class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def show_info(self):
        print(self.name, self.age)

student = Student("Алексей", 34)
student.show_info()



#Задача 10. ООП ч.2
#Создайте класс Animal с атрибутами:
#name (кличка животного)
#species (вид животного, например "собака")
#И методами:
#eat()
#sleep()
#Затем создайте дочерний класс Dog, который:
#Наследует все от класса Animal
#Имеет дополнительный метод bark() (лаять)
#Задание:
# Создайте объект my_dog класса Dog с любым именем
# Вызовите все три метода eat(), sleep(), bark() и выведите #результаты
class Animal:
    def __init__(self, name, species):
        self.name = name
        self.species = species

    def eat(self):
        pass

    def sleep(self):
        pass

class Dog(Animal):
    def __init__(self, name, species):
        super().__init__(name, species)

    def bark(self):
        pass

my_dog = Dog("Шарик", "собака")

my_dog.eat()
my_dog.sleep()
my_dog.bark()






























